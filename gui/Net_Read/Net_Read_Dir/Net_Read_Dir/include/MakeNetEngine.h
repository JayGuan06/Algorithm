//*******************************************************************************************************************************
//
//	File name:				MakeNetEngine.h
//
//	File type:				C header file
//
//	File description:		凌声芯课件制作引擎头文件，主要描述凌声芯课件制作引擎对应用的接口及定义
//
//	History:				DATA				ACTION			AUTHOR				MEMO
//							2009/11/2			Create			Xushuo
//							2009/11/6			Modify			Xushuo				添加国际音标定义说明，删除部分笔误
//							2009/11/11			Modify			Xushuo				去除复杂结构的结构支持和函数支持。改为由通用
//																					库支持，以便各引擎和引擎内外共同使用
//							2009/12/05			Modify			Xushuo				去除动态数组相关接口，以解决异工程申请释放内存
//																					系统错误问题
//
//*******************************************************************************************************************************

#pragma once

#ifndef __VO_ASEC_MAKENETENGINE_H__
#define __VO_ASEC_MAKENETENGINE_H__

// 引用通用结构
#include "EngineDefine.h"
// 引用音标定义
#include "VoiceOnIPA.h"

//*******************************************************************************************************************************
//	Area of definition
//*******************************************************************************************************************************

//	空句柄
#define MNHANDLE_NULL						0

//	数据支持版本定义
//	最小读取版本
#define SUPPORT_DATA_LOAD_MIN				1
//	最小存储版本
#define SUPPORT_DATA_SAVE_MIN				2
//	最大存储版本
#define SUPPORT_DATA_SAVE_MAX				3

//*******************************************************************************************************************************
//	Area of data type definition
//*******************************************************************************************************************************

//	网络生成会话句柄
typedef unsigned int			HMNSESSION;

//  错误代码定义
typedef enum _VO_MN_ERROR_CODE
{
	VO_MN_NO_ERR = 0,
	VO_MN_ERR_COMMON,
	VO_MN_ERR_INVALID_HANDLE,
	VO_MN_ERR_INVALID_SRC_DATA,
	VO_MN_ERR_SET_SAVE_VER_OUT_RANGE,
	VO_MN_ERR_SET_SOUND_OUT_RANG,
	VO_MN_ERR_SOUND_FILE_FAIL,
	VO_MN_ERR_NULL_ORG_TEXT,
	VO_MN_ERR_POS_OUT_RANGE,
	VO_MN_ERR_NULL_BACK_POINTER,
	VO_MN_ERR_INVALID_TABLE_CNT,
	VO_MN_ERR_INVALID_TABLE_DATA,
	VO_MN_ERR_INVALID_TYPE,
	VO_MN_ERR_DISABLE_DATA,
	VO_MN_ERR_NO_DATA,
	VO_MN_ERR_MALLOC,
	CNT_VO_MN_ERR_CNT
}VO_MN_ERROR_CODE;

//*******************************************************************************************************************************
//	Area of function declaration
//*******************************************************************************************************************************

//-------------------------------------------------------------------------------------------------------------------------------
//	引擎函数
//-------------------------------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------------------------------
//	Function name:			GetEngineVer
//
//	Input:					<NONE>
//
//	Output:					<RES> - int				返回引擎版本
//
//	Description:			取得引擎版本，当引擎所支持的数据版本有变化应改变此版本，引擎有关键改动应改变此版本
//-------------------------------------------------------------------------------------------------------------------------------
int GetEngineVer();

//-------------------------------------------------------------------------------------------------------------------------------
//	Function name:			GetSupportDataVer
//
//	Input:					nType - int				要求获得的信息号，详见“数据支持版本定义”，如不在定义范围失败
//
//	Output:					<RES> - int				成功返回支持的数据版本（nType指定的）
//													失败返回-1
//
//	Description:			取得所支持的数据版本
//-------------------------------------------------------------------------------------------------------------------------------
int GetSupportDataVer(int nType);

//-------------------------------------------------------------------------------------------------------------------------------
//	会话基本函数
//-------------------------------------------------------------------------------------------------------------------------------

//-------------------------------------------------------------------------------------------------------------------------------
//	Function name:			StartSession
//
//	Input:					<NONE>
//
//	Output:					<RES> - HMNSESSION				成功返回本次会话的句柄
//															失败返回MNHANDLE_NULL
//
//	Description:			启动一次网络生成会话
//-------------------------------------------------------------------------------------------------------------------------------
HMNSESSION StartSession();

//-------------------------------------------------------------------------------------------------------------------------------
//	Function name:			EndSession
//
//	Input:					hSession - HMNSESSION			会话的句柄，如果句柄无效函数失败
//
//	Output:					<RES> - bool					成功返回true
//															失败返回false
//
//	Description:			结束一次网络生成会话
//-------------------------------------------------------------------------------------------------------------------------------
bool EndSession(HMNSESSION hSession);

//-------------------------------------------------------------------------------------------------------------------------------
//	Function name:			ResetSession
//
//	Input:					hSession - HMNSESSION			会话的句柄，如果句柄无效函数失败
//
//	Output:					<RES> - bool					成功返回true
//															失败返回false
//
//	Description:			重置会话，将会话数据恢复到缺省状态
//-------------------------------------------------------------------------------------------------------------------------------
bool ResetSession(HMNSESSION hSession);

//-------------------------------------------------------------------------------------------------------------------------------
//	Function name:			CopySession
//
//	Input:					hDescSession - HMNSESSION		目标会话的句柄，如果句柄无效函数失败
//
//							hSrcSession - HMNSESSION		源会话的句柄，如果句柄无效函数失败
//
//	Output:					<RES> - bool					成功返回true
//															失败返回false
//
//	Description:			拷贝会话，将源的会话数据复制到目标会话，不包括一下3项数据，“会话加密码”、“会话生效的生成数据设置”
//							和“会话存储版本”
//-------------------------------------------------------------------------------------------------------------------------------
bool CopySession(HMNSESSION hDescSession, HMNSESSION hSrcSession);

//-------------------------------------------------------------------------------------------------------------------------------
//	Function name:			GetSessionErrCode
//
//	Input:					hSession - HMNSESSION			目标会话的句柄，如果句柄无效函数失败
//
//	Output:					<RES> - int						成功返回错误代码
//															失败返回-1
//
//	Description:			取得最近一次操作的错误代码
//-------------------------------------------------------------------------------------------------------------------------------
int GetSessionErrCode(HMNSESSION hSession);


//-------------------------------------------------------------------------------------------------------------------------------
//	Function name:			GetSessionErrInfo
//
//	Input:					nErrCode - int					错误代码，该错误代码不存在函数失败
//
//							pBuffer - char *				返回空间指针
//
//							nLen - int						返回空家大小
//
//	Output:					<RES> - int						成功返回0
//															失败返回-1
//															如果pBuffer为空或Len长度不足返回所需长度
//
//							*pBuffer - 字符串				成功时错误信息
//															失败不改变
//
//	Description:			取得错误代码的相关信息
//-------------------------------------------------------------------------------------------------------------------------------
int GetSessionErrInfo(int nErrCode, char * pBuffer, int nLen);

//-------------------------------------------------------------------------------------------------------------------------------
//	会话设置函数
//-------------------------------------------------------------------------------------------------------------------------------

//-------------------------------------------------------------------------------------------------------------------------------
//	Function name:			SetECode
//
//	Input:					hSession - HMNSESSION			会话的句柄，如果句柄无效函数失败
//
//							pCode - PMN_ECODE				指向加密码数据结构的指针，如其为NULL会话加密码设为缺省值
//
//	Output:					<RES> - bool					成功返回true
//															失败返回false
//
//	Description:			设置会话加密码（会话数据），此加密码用于在网络生成时加密数据。会话缺省值为{0, 0, 0, 0, 0, 0, 0, 0}，
//							此状态下网络数据不被加密
//-------------------------------------------------------------------------------------------------------------------------------
bool SetECode(HMNSESSION hSession, PMN_ECODE pCode);

//-------------------------------------------------------------------------------------------------------------------------------
//	Function name:			SetSaveDataVer
//
//	Input:					hSession - HMNSESSION			会话的句柄，如果句柄无效函数失败
//
//							nVer - int						存储版本，如超出引擎所支持范围函数失败
//
//	Output:					<RES> - bool					成功返回true
//															失败返回false
//
//	Description:			设置会话存储版本（会话数据），会话缺省值为引擎所支持的最高版本
//-------------------------------------------------------------------------------------------------------------------------------
bool SetSaveDataVer(HMNSESSION hSession, int nVer);

//-------------------------------------------------------------------------------------------------------------------------------
//	Function name:			GetSaveDataVer
//
//	Input:					hSession - HMNSESSION			会话的句柄，如果句柄无效函数失败
//
//	Output:					<RES> - int					成功返回会话存储版本
//															失败返回-1
//
//	Description:			取得会话存储版本
//-------------------------------------------------------------------------------------------------------------------------------
int GetSaveDataVer(HMNSESSION hSession);

//-------------------------------------------------------------------------------------------------------------------------------
//	Function name:			LoadNet
//
//	Input:					hSession - HMNSESSION			会话的句柄，如果句柄无效函数失败
//
//
//
//
//
//
//	Output:					<RES> - bool						成功返回true
//																失败返回false
//
//	Description:			根据会话加密码加载Net数据到会话，应从Net数据中恢复以下会话数据
//							* 原始语句
//							* 拆分描述
//							* 音标描述
//							* 语调		（或标志无效）
//							* 语速		（或标志无效）
//							* 重点词	（或标志不存在）
//							* 重读词	（或标志不存在）
//							* 流利度	（或标志无效）
//							* net核心数据
//							* 数据版本
//							如果会话加密码与Net数据的加密码不吻合（解密后数据验证无效）此函数应失败。
//							如果数据版本小于引擎最小所支持读取版本应失败
//							如果引擎版本小于数据最小所需引擎版本应失败
//							函数失败时应重置会话
//-------------------------------------------------------------------------------------------------------------------------------
bool LoadNet(HMNSESSION hSession, void * pNet, int nLen);


//-------------------------------------------------------------------------------------------------------------------------------
//	Function name:			SetEffectiveData
//
//	Input:					hSession - HMNSESSION			会话的句柄，如果句柄无效函数失败
//
//							nData - unsigned int			生效的生成数据设置（bit），详见“生成数据定义”
//
//	Output:					<RES> - bool					成功返回true
//															失败返回false
//
//	Description:			设置会话生效的生成数据设置（会话数据），这些功能包括语句升降调、语句流利度（不可调节）、语速（不可调节）、
//							句重读和词重音等评判信息。会话缺省值为GENERATION_DATA_STRESS
//-------------------------------------------------------------------------------------------------------------------------------
bool SetEffectiveData(HMNSESSION hSession, unsigned int nData);

//-------------------------------------------------------------------------------------------------------------------------------
//	Function name:			GetEffectiveData
//
//	Input:					hSession - HMNSESSION			会话的句柄，如果句柄无效函数失败
//
//	Output:					<RES> - unsigned int			成功返回生效的生成数据设置（bit）
//															失败返回0
//
//	Description:			取得会话生效的生成数据设置（会话数据）
//-------------------------------------------------------------------------------------------------------------------------------
unsigned int GetEffectiveData(HMNSESSION hSession);

//-------------------------------------------------------------------------------------------------------------------------------
//	原始数据函数
//-------------------------------------------------------------------------------------------------------------------------------

//-------------------------------------------------------------------------------------------------------------------------------
//	Function name:			SetOrgText
//
//	Input:					hSession - HMNSESSION			会话的句柄，如果句柄无效函数失败
//
//							sText - char *					文本串指针，如果此指针为NULL则置会话原始文本为缺省值
//
//	Output:					<RES> - bool					成功返回true
//															失败返回false
//
//	Description:			设置会话原始文本（会话数据），此文本用于自动生成单词拆分。会话缺省值为""
//-------------------------------------------------------------------------------------------------------------------------------
bool SetOrgText(HMNSESSION hSession, char * sText);

//-------------------------------------------------------------------------------------------------------------------------------
//	Function name:			GetOrgText
//
//	Input:					hSession - HMNSESSION			会话的句柄，如果句柄无效函数失败
//
//							sText - char *					用于接收文本串指针
//
//							nBufferLen - int				sText所指向的空间长度
//
//	Output:					<RES> - int						成功返回0
//															如sText为NULL或nBufferLen所标示长度不足返回实际所需空间大小
//															失败返回-1
//
//							sText - char *					函数成功执行时，其所指向的空间为会话原始文本
//
//	Description:			获取会话原始文本（会话数据）
//-------------------------------------------------------------------------------------------------------------------------------
int GetOrgText(HMNSESSION hSession, char * sText, int nBufferLen);

//-------------------------------------------------------------------------------------------------------------------------------
//	Function name:			SetOrgSoundByPoint
//
//	Input:					hSession - HMNSESSION			会话的句柄，如果句柄无效函数失败
//
//							pFile - FILE *					文件指针，指向声音文件，如果此值为NULL，会话原始声音设为缺省值，函数成功
//
//							nOffset - unsigned int			有效数据在文件中的偏移起始位置，如果此值大于等于文件长度函数失败
//
//							nLen - int						有效数据长度，如果此长度加上偏移大于文件长度函数失败
//
//	Output:					<RES> - bool					成功返回true
//															失败返回false
//
//	Description:			设置会话原始声音（会话数据，文件指针方式），此声音用于自动判断语句升降调、语句流利度（不可调节）、
//							语速（不可调节）、句重读和词重音等评判信息。会话缺省值为“无原始语音文件”
//-------------------------------------------------------------------------------------------------------------------------------
bool SetOrgSoundByPoint(HMNSESSION hSession, FILE * pFile, unsigned int nOffset = 0, int nLen = -1);

//-------------------------------------------------------------------------------------------------------------------------------
//	Function name:			SetOrgSoundByName
//
//	Input:					hSession - HMNSESSION			会话的句柄，如果句柄无效函数失败
//
//							sFileName - char *				声音文件名称，如果此值为NULL，会话原始声音设为缺省值，函数成功
//
//							nOffset - unsigned int			有效数据在文件中的偏移起始位置，如果此值大于等于文件长度函数失败
//
//							nLen - int						有效数据长度，如果此长度加上偏移大于文件长度函数失败
//
//	Output:					<RES> - bool					成功返回true
//															失败返回false
//
//	Description:			设置会话原始声音（会话数据，文件名方式），此声音用于自动判断语句升降调、语句流利度（不可调节）、
//							语速（不可调节）、句重读和词重音等评判信息。会话缺省值为“无原始语音文件”
//-------------------------------------------------------------------------------------------------------------------------------
bool SetOrgSoundByName(HMNSESSION hSession, char * sFileName, unsigned int nOffset = 0, int nLen = -1);

//-------------------------------------------------------------------------------------------------------------------------------
//	拆分文本描述函数
//-------------------------------------------------------------------------------------------------------------------------------

//-------------------------------------------------------------------------------------------------------------------------------
//	Function name:			SplitOrgText
//
//	Input:					hSession - HMNSESSION			会话的句柄，如果句柄无效函数失败
//
//	Output:					<RES> - bool					成功返回true
//															失败返回false
//
//	Description:			拆分原始文本，生成拆分文本描述（会话数据），缺省值为NULL
//-------------------------------------------------------------------------------------------------------------------------------
bool SplitOrgText(HMNSESSION hSession);

//-------------------------------------------------------------------------------------------------------------------------------
//	Function name:			GetTextSplitCount
//
//	Input:					hSession - HMNSESSION				会话的句柄，如果句柄无效函数失败
//
//	Output:					<RES> - int							成功返回项数
//																失败返回-1
//
//	Description:			取得拆分文本项数（会话数据）
//-------------------------------------------------------------------------------------------------------------------------------
int GetTextSplitCount(HMNSESSION hSession);

//-------------------------------------------------------------------------------------------------------------------------------
//	Function name:			GetTextSplitItem
//
//	Input:					hSession - HMNSESSION				会话的句柄，如果句柄无效函数失败
//
//							nPos - int							项位置，当其小于0或者大于等于文本拆分项数，函数失败
//
//							pItem - PTEXT_SPLIT_ITEM			接收指针，如此指针为NULL，函数执行失败
//
//	Output:					<RES> - bool						成功返回true
//																失败返回false
//							
//							*pItem - TEXT_SPLIT_ITEM			成功返回文本拆分项内容
//																失败不改变
//
//	Description:			取得拆分文本项，文本拆分各项根据起始位置升序排列(双字节字符算两个字符)
//-------------------------------------------------------------------------------------------------------------------------------
bool GetTextSplitItem(HMNSESSION hSession, int nPos, PTEXT_SPLIT_ITEM pItem);
//-------------------------------------------------------------------------------------------------------------------------------
//	Function name:			GetTextSplitItem
//
//	Input:					hSession - HMNSESSION				会话的句柄，如果句柄无效函数失败
//
//							nPos - int							项位置，当其小于0或者大于等于文本拆分项数，函数失败
//
//							pItem - PTEXT_SPLIT_ITEM			接收指针，如此指针为NULL，函数执行失败
//
//	Output:					<RES> - bool						成功返回true
//																失败返回false
//							
//							*pItem - TEXT_SPLIT_ITEM			成功返回文本拆分项内容
//																失败不改变
//
//	Description:			取得拆分文本项，文本拆分各项根据起始位置升序排列(双字节字符算一个字符)
//-------------------------------------------------------------------------------------------------------------------------------
bool GetTextSplitItemW(HMNSESSION hSession, int nPos, PTEXT_SPLIT_ITEM pItem);

//-------------------------------------------------------------------------------------------------------------------------------
//	Function name:			ReplaceTextSplitItem
//
//	Input:					hSession - HMNSESSION				会话的句柄，如果句柄无效函数失败
//
//							nPos - int							项位置，当其小于0或者大于等于文本拆分项数，函数失败
//
//							pItem - PTEXT_SPLIT_ITEM			内容指针，如此指针为NULL，函数执行失败
//
//	Output:					<RES> - int							成功返回该项新的位置
//																失败返回-1
//
//	Description:			取代文本拆分项内容，文本拆分各项根据起始位置升序排列
//-------------------------------------------------------------------------------------------------------------------------------
int ReplaceTextSplitItem(HMNSESSION hSession, int nPos, PTEXT_SPLIT_ITEM pItem);

//-------------------------------------------------------------------------------------------------------------------------------
//	Function name:			ReplaceTextSplitItem
//
//	Input:					hSession - HMNSESSION				会话的句柄，如果句柄无效函数失败
//
//							nPos - int							项位置，当其小于0或者大于等于文本拆分项数，函数失败
//
//							pItem - PTEXT_SPLIT_ITEM			内容指针，如此指针为NULL，函数执行失败
//
//	Output:					<RES> - int							成功返回该项新的位置
//																失败返回-1
//
//	Description:			取代文本拆分项内容，文本拆分各项根据起始位置升序排列
//-------------------------------------------------------------------------------------------------------------------------------
int ReplaceTextSplitItemW(HMNSESSION hSession, int nPos, PTEXT_SPLIT_ITEM pItem);

//-------------------------------------------------------------------------------------------------------------------------------
//	Function name:			InsertTextSplitItem
//
//	Input:					hSession - HMNSESSION				会话的句柄，如果句柄无效函数失败
//
//							pItem - PTEXT_SPLIT_ITEM			内容指针，如此指针为NULL，函数执行失败
//
//	Output:					<RES> - int							成功返回该项的位置
//																失败返回-1
//
//	Description:			插入文本拆分项，文本拆分各项根据起始位置升序排列
//-------------------------------------------------------------------------------------------------------------------------------
int InsertTextSplitItem(HMNSESSION hSession, PTEXT_SPLIT_ITEM pItem);

//-------------------------------------------------------------------------------------------------------------------------------
//	Function name:			InsertTextSplitItem
//
//	Input:					hSession - HMNSESSION				会话的句柄，如果句柄无效函数失败
//
//							pItem - PTEXT_SPLIT_ITEM			内容指针，如此指针为NULL，函数执行失败
//
//	Output:					<RES> - int							成功返回该项的位置
//																失败返回-1
//
//	Description:			插入文本拆分项，文本拆分各项根据起始位置升序排列
//-------------------------------------------------------------------------------------------------------------------------------
int InsertTextSplitItemW(HMNSESSION hSession, PTEXT_SPLIT_ITEM pItem);

//-------------------------------------------------------------------------------------------------------------------------------
//	Function name:			DelTextSplitItem
//
//	Input:					hSession - HMNSESSION				会话的句柄，如果句柄无效函数失败
//
//							nPos - int							项位置，当其小于0或者大于等于文本拆分项数，函数失败
//
//	Output:					<RES> - bool						成功返回true
//																失败返回false
//
//	Description:			删除拆分文本项
//-------------------------------------------------------------------------------------------------------------------------------
bool DelTextSplitItem(HMNSESSION hSession, int nPos);

//-------------------------------------------------------------------------------------------------------------------------------
//	Function name:			GetTextSplitText
//
//	Input:					hSession - HMNSESSION				会话的句柄，如果句柄无效函数失败
//
//							nPos - int							项位置，当其小于0或者大于等于文本拆分项数，函数失败
//
//							sText - char*						用于接收拆分项文本串指针
//
//							nBufferLen - int					sText所指向的空间长度
//
///	Output:					<RES> - int							成功返回0
//									如sText为NULL或nBufferLen所标示长度不足返回实际所需空间大小
//									失败返回-1
//	
//							sText - char*						函数成功执行时，其所指向的空间为拆分项文本
//
//	Description:			取得拆分文本项文本，文本拆分各项根据起始位置升序排列
//-------------------------------------------------------------------------------------------------------------------------------
int GetTextSplitText(HMNSESSION hSession, int nPos, char * sText, int nBufferLen);

//-------------------------------------------------------------------------------------------------------------------------------
//	Function name:			ReplaceTextSplitText
//
//	Input:					hSession - HMNSESSION				会话的句柄，如果句柄无效函数失败
//
//							nPos - int							项位置，当其小于0或者大于等于文本拆分项数，函数失败
//
//							sText - char*						拆分项文本串指针，如果此指针为NULL则函数执行失败
//
//	Output:					<RES> - bool						成功返回true
//									失败返回false
//
//	Description:			取代文本拆分项的文本，文本拆分各项根据起始位置升序排列
//							此函数执行成功时会影响语句的原始文本内容、被改变的拆分项的音标和各拆分项位置信息等
//							但不改变其它拆分项的音标信息（重要）
//-------------------------------------------------------------------------------------------------------------------------------
bool ReplaceTextSplitText(HMNSESSION hSession, int nPos, char * sText);

//-------------------------------------------------------------------------------------------------------------------------------
//	Function name:			ClearTextSplit
//
//	Input:					hSession - HMNSESSION				会话的句柄，如果句柄无效函数失败
//
//	Output:					<RES> - bool						成功返回true
//																失败返回false
//	Description:			清除所有拆分文本项
//-------------------------------------------------------------------------------------------------------------------------------
bool ClearTextSplit(HMNSESSION hSession);

//-------------------------------------------------------------------------------------------------------------------------------
//	Function name:			SetTextSplitUserData
//
//	Input:					hSession - HMNSESSION				会话的句柄，如果句柄无效函数失败
//
//							nPos - int							项位置，当其小于0或者大于等于文本拆分项数，函数失败
//
//							nData - int							用户数据
//
//	Output:					<RES> - bool						成功返回true
//																失败返回false
//
//	Description:			设置对应拆分文本项的用户数据
//-------------------------------------------------------------------------------------------------------------------------------
bool SetTextSplitUserData(HMNSESSION hSession, int nPos, int nData);

//-------------------------------------------------------------------------------------------------------------------------------
//	Function name:			GetTextSplitUserData
//
//	Input:					hSession - HMNSESSION				会话的句柄，如果句柄无效函数失败
//
//							nPos - int							项位置，当其小于0或者大于等于文本拆分项数，函数失败
//
//	Output:					<RES> - int							成功返回附加数据
//																失败返回0
//
//	Description:			取得对应拆分文本项的用户数据
//-------------------------------------------------------------------------------------------------------------------------------
int GetTextSplitUserData(HMNSESSION hSession, int nPos);

//-------------------------------------------------------------------------------------------------------------------------------
//	音标函数
//-------------------------------------------------------------------------------------------------------------------------------

//-------------------------------------------------------------------------------------------------------------------------------
//	Function name:			CreatePhonetic
//
//	Input:					hSession - HMNSESSION			会话的句柄，如果句柄无效函数失败
//						
//							tblEnable - int *				生效表，此项如果为空所有文本拆分项生效
//
//							nCnt - int						生效表项数
//
//	Output:					<RES> - bool					成功返回true
//															失败返回false
//
//	Description:			生成音标（会话数据），如会话生效的生成数据设置包括GENERATION_DATA_STRESS且会话的原始语音数据存在，
//							应该在音标中包含重音轻音描述。此函数依赖以下会话数据：原始文本，拆分文本描述，原始语音（可选），
//							必要会话数据不存在时此函数失败
//-------------------------------------------------------------------------------------------------------------------------------
bool CreatePhonetic(HMNSESSION hSession, int * tblEnable, int nCnt);

//-------------------------------------------------------------------------------------------------------------------------------
//	Function name:			SetPhoneticType
//
//	Input:					hSession - HMNSESSION				会话的句柄，如果句柄无效函数失败
//
//							nType - int							音标类型，定义见《EngineDefine.h》 - “音标类型定义”
//
//	Output:					<RES> - int							成功返回原有操作类型
//																失败返回-1
//
//	Description:			设置所操作的音标的类型，会话缺省为VO_PHONETIC_TYPE_IPA
//-------------------------------------------------------------------------------------------------------------------------------
int SetPhoneticType(HMNSESSION hSession, int nType);

//-------------------------------------------------------------------------------------------------------------------------------
//	Function name:			GetPhoneticCount
//
//	Input:					hSession - HMNSESSION				会话的句柄，如果句柄无效函数失败
//
//							nSplitPos - int						文本拆分位置
//
//	Output:					<RES> - int							成功返回项数
//																失败返回-1
//
//	Description:			取得指定拆分文本项的音标项数
//-------------------------------------------------------------------------------------------------------------------------------
int GetPhoneticCount(HMNSESSION hSession, int nSplitPos);

//-------------------------------------------------------------------------------------------------------------------------------
//	Function name:			GetPhoneticItem
//
//	Input:					hSession - HMNSESSION				会话的句柄，如果句柄无效函数失败
//
//							nSplitPos - int						文本拆分位置
//
//							nPos - int							项位置，当其小于0或者大于等于文本拆分项数，函数失败
//
//							pBuffer - int *						接收指针，如此指针为NULL，函数执行失败
//
//							nBufferLen - int					接收区域长度
//
//	Output:					<RES> - int							成功返回0
//																失败返回-1
//																pBuffer为NULL或nBufferLen长度不足，返回实际所需长度
//							
//							pBuffer[] - int <ARRAY>				成功返回音标串（以0结尾）
//																失败不改变
//
//	Description:			取得指定文本拆分项的音标项
//-------------------------------------------------------------------------------------------------------------------------------
int GetPhoneticItem(HMNSESSION hSession, int nSplitPos, int nPos, int * pBuffer, int nBufferLen);

//-------------------------------------------------------------------------------------------------------------------------------
//	Function name:			ReplacePhoneticItem
//
//	Input:					hSession - HMNSESSION				会话的句柄，如果句柄无效函数失败
//
//							nSplitPos - int						文本拆分位置
//
//							nPos - int							项位置，当其小于0或者大于等于文本拆分项数，函数失败
//
//							pBuffer - int *						内容指针，内容应以0结尾，如此指针为NULL，函数执行失败
//
//	Output:					<RES> - bool						成功返回true
//																失败返回false
//
//	Description:			取代指定文本拆分项的音标项
//-------------------------------------------------------------------------------------------------------------------------------
bool ReplacePhoneticItem(HMNSESSION hSession, int nSplitPos, int nPos, int * pBuffer);

//-------------------------------------------------------------------------------------------------------------------------------
//	Function name:			InsertPhoneticItem
//
//	Input:					hSession - HMNSESSION				会话的句柄，如果句柄无效函数失败
//
//							nSplitPos - int						文本拆分位置
//
//							nPos - int							项位置，当其小于0或者大于等于文本拆分项数并且不等于-1，函数失败
//																当其为-1时在末尾插入新项
//
//							pBuffer - int *						内容指针，内容应以0结尾，如此指针为NULL，函数执行失败
//
//	Output:					<RES> - bool						成功返回true
//																失败返回false
//
//	Description:			插入指定文本拆分项的音标项
//-------------------------------------------------------------------------------------------------------------------------------
bool InsertPhoneticItem(HMNSESSION hSession, int nSplitPos, int nPos, int * pBuffer);

//-------------------------------------------------------------------------------------------------------------------------------
//	Function name:			DelPhoneticItem
//
//	Input:					hSession - HMNSESSION				会话的句柄，如果句柄无效函数失败
//
//							nSplitPos - int						文本拆分位置
//
//							nPos - int							项位置，当其小于0或者大于等于文本拆分项数，函数失败
//
//	Output:					<RES> - bool						成功返回true
//																失败返回false
//
//	Description:			删除指定文本拆分项的音标项
//-------------------------------------------------------------------------------------------------------------------------------
bool DelPhoneticItem(HMNSESSION hSession, int nSplitPos, int nPos);

//-------------------------------------------------------------------------------------------------------------------------------
//	Function name:			ClearPhonetic
//
//	Input:					hSession - HMNSESSION				会话的句柄，如果句柄无效函数失败
//
//							nSplitPos - int						文本拆分位置
//
//	Output:					<RES> - bool						成功返回true
//																失败返回false
//	Description:			清除所有指定文本拆分项的音标项
//-------------------------------------------------------------------------------------------------------------------------------
bool ClearPhonetic(HMNSESSION hSession, int nSplitPos);

//-------------------------------------------------------------------------------------------------------------------------------
//	可调节数据函数
//-------------------------------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------------------------------
//	Function name:			CreateAdjustableData
//
//	Input:					hSession - HMNSESSION				会话的句柄，如果句柄无效函数失败
//
//	Output:					<RES> - bool						成功返回true
//																失败返回false
//
//	Description:			生成“可调节数据”（会话数据）其中包括：语调（如原始语音不存在，此项为缺省值）、
//							句重读（如原始语音不存在，此项为缺省值）、重点词（此项只需置为缺省值）等。上述数据如在
//							“会话生效的生成数据设置”未设置为有效，则该项数据设置为缺省值
//-------------------------------------------------------------------------------------------------------------------------------
bool CreateAdjustableData(HMNSESSION hSession);

//-------------------------------------------------------------------------------------------------------------------------------
//	Function name:			GetTone
//
//	Input:					hSession - HMNSESSION				会话的句柄，如果句柄无效函数失败
//
//	Output:					<RES> - int							成功: 0:无效 1:降调 2:升调
//																失败返回 < 0
//
//	Description:			取得音调数据（会话数据）
//-------------------------------------------------------------------------------------------------------------------------------
int GetTone(HMNSESSION hSession);

//-------------------------------------------------------------------------------------------------------------------------------
//	Function name:			SetTone
//
//	Input:					hSession - HMNSESSION				会话的句柄，如果句柄无效函数失败
//
//							nTone - int							音调数据，0:无效 1:降调 2:升调，如非此三个值则置为缺省值
//
//	Output:					<RES> - bool						成功返回true
//																失败返回false
//
//	Description:			设置音标描述（国际音标，会话数据），会话缺省值为“无效”
//-------------------------------------------------------------------------------------------------------------------------------
bool SetTone(HMNSESSION hSession, int nTone);

//-------------------------------------------------------------------------------------------------------------------------------
//	Function name:			GetStatementStress
//
//	Input:					hSession - HMNSESSION				会话的句柄，如果句柄无效函数失败
//							
//							nSplitePos - int					文本拆分位置，如果位置超出范围函数失败
//
//	Output:					<RES> - bool						成功返回这是一项是否为句重读
//																失败返回false
//
//	Description:			取得指定文本拆分项的重读词描述
//-------------------------------------------------------------------------------------------------------------------------------
bool GetStatementStress(HMNSESSION hSession, int nSplitePos);

//-------------------------------------------------------------------------------------------------------------------------------
//	Function name:			SetStatementStress
//
//	Input:					hSession - HMNSESSION				会话的句柄，如果句柄无效函数失败
//
//							nSplitePos - int					文本拆分位置，如果位置超出范围函数失败
//
//							bIs - bool							是否为句重读
//
//	Output:					<RES> - bool						成功返回true
//																失败返回false
//
//	Description:			设置指定文本拆分项的重读词描述
//-------------------------------------------------------------------------------------------------------------------------------
bool SetStatementStress(HMNSESSION hSession, int nSplitePos, bool bIs);

//-------------------------------------------------------------------------------------------------------------------------------
//	Function name:			GetStress
//
//	Input:					hSession - HMNSESSION				会话的句柄，如果句柄无效函数失败
//							
//							nSplitePos - int					文本拆分位置，如果位置超出范围函数失败
//
//	Output:					<RES> - bool						成功返回这是一项是否为句重读
//																失败返回false
//
//	Description:			取得指定文本拆分项的重点词描述
//-------------------------------------------------------------------------------------------------------------------------------
bool GetStress(HMNSESSION hSession, int nSplitePos);

//-------------------------------------------------------------------------------------------------------------------------------
//	Function name:			SetStress
//
//	Input:					hSession - HMNSESSION				会话的句柄，如果句柄无效函数失败
//
//							nSplitePos - int					文本拆分位置，如果位置超出范围函数失败
//
//							bIs - bool							是否为重点词
//
//	Output:					<RES> - bool						成功返回true
//																失败返回false
//
//	Description:			设置指定文本拆分项的重点词描述
//-------------------------------------------------------------------------------------------------------------------------------
bool SetStress(HMNSESSION hSession, int nSplitePos, bool bIs);

//-------------------------------------------------------------------------------------------------------------------------------
//	网络及最终数据函数
//-------------------------------------------------------------------------------------------------------------------------------

//-------------------------------------------------------------------------------------------------------------------------------
//	Function name:			CreateNet
//
//	Input:					hSession - HMNSESSION				会话的句柄，如果句柄无效函数失败
//
//	Output:					<RES> - bool						成功返回true
//																失败返回false
//
//	Description:			生成网络（会话数据），此函数依赖以下会话数据：音标，原始语音（可选），“会话生效的生成数据设置”，
//							必要会话数据不存在时此函数失败。
//							此数据中含有以下会话数据的完整信息，可作为再编辑加载时使用
//							* 原始语句
//							* 拆分描述
//							* 音标描述
//							* 语调		（或标志无效）
//							* 语速		（或标志无效）
//							* 重点词	（或标志不存在）
//							* 重读词	（或标志不存在）
//							* 流利度	（或标志无效）
//							* net核心数据
//							* 数据版本
//							* 读取数据所需最小引擎版本
//							此数据除识别数据（例如版本、读取数据所需最小引擎版本和文件头等），其它部分根据“会话加密码”进行加密
//-------------------------------------------------------------------------------------------------------------------------------
bool CreateNet(HMNSESSION hSession);

//-------------------------------------------------------------------------------------------------------------------------------
//	Function name:			GetNet
//
//	Input:					hSession - HMNSESSION			会话的句柄，如果句柄无效函数失败
//
//							pBuffer - void *				用于接收数据的空间的指针
//
//							nBufferLen - int				pBuffer所指向的空间长度
//
//	Output:					<RES> - int						成功返回0
//															如pBuffer为NULL或nBufferLen所标示长度不足返回实际所需空间大小
//															失败返回-1
//
//							sText - char *					函数成功执行时，其所指向的空间为会话原始文本
//
//	Description:			获取网络数据（会话数据）
//-------------------------------------------------------------------------------------------------------------------------------
int GetNet(HMNSESSION hSession, void * pBuffer, int nBufferLen);

//-------------------------------------------------------------------------------------------------------------------------------
//	Function name:			NetIsExist
//
//	Input:					hSession - HMNSESSION			会话的句柄，如果句柄无效函数失败
//
//	Output:					<RES> - bool					成功返回网络数据是否存在
//															失败返回FALSE
//
//	Description:			获取网络数据（会话数据）是否存在
//-------------------------------------------------------------------------------------------------------------------------------
bool NetIsExist(HMNSESSION hSession);

//-------------------------------------------------------------------------------------------------------------------------------
//	Function name:			FluecyIsExist
//
//	Input:					hSession - HMNSESSION			会话的句柄，如果句柄无效函数失败
//
//	Output:					<RES> - bool					成功返回流利度数据是否存在
//															失败返回FALSE
//
//	Description:			获取流利度数据（会话数据）是否存在
//-------------------------------------------------------------------------------------------------------------------------------
bool FluecyIsExist(HMNSESSION hSession);

//-------------------------------------------------------------------------------------------------------------------------------
//	Function name:			SpeedIsExist
//
//	Input:					hSession - HMNSESSION			会话的句柄，如果句柄无效函数失败
//
//	Output:					<RES> - bool					成功返回语速数据是否存在
//															失败返回FALSE
//
//	Description:			获取语速数据（会话数据）是否存在
//-------------------------------------------------------------------------------------------------------------------------------
bool SpeedIsExist(HMNSESSION hSession);

#endif	//	__VO_ASEC_MAKENETENGINE_H__

//*******************************************************************************************************************************
// File end
//*******************************************************************************************************************************
